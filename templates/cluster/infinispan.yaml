---
{{- /*
This template will create a single Red Hat Data Grid cluster using the
`Infinispan` custom resource.
*/}}
{{- if .Values.infinispan.enabled -}}
apiVersion: infinispan.org/v1
kind: Infinispan
metadata:
  name: {{ .Values.infinispan.name }}
  {{- if .Values.monitoring.disablePrometheus }}
  annotations:
    infinispan.org/monitoring: 'false'
  {{- end }}
spec:
  {{- if not (and .Values.autoscaling.enabled 
    (or .Values.autoscaling.cpuAverageUtilization
    .Values.autoscaling.memoryAverageUtilization)) }}
  replicas: {{ .Values.infinispan.replicas }}
  {{- end }}
  version: {{ .Values.infinispan.version }}
  service:
    type: DataGrid
  {{- if .Values.customConfig.enabled }}
  configMapName: {{ .Release.Name }}-datagrid-custom-config
  {{- end }}
  upgrades:
    type: {{ .Values.infinispan.upgradeType }}
  {{- if .Values.infinispan.disableConfigListener }}
  configListener:
    enabled: false
  {{- end }}
  expose:
    type: {{ .Values.expose.type }}
  {{- if eq "Route" .Values.expose.type }}
    host: {{ .Values.expose.hostname }}
  {{- else if and (eq "NodePort" .Values.expose.type) }}
    nodePort: {{ .Values.expose.port }}
  {{- else if eq "LoadBalancer" .Values.expose.type }}
    port: {{ default 11222 .Values.expose.port }}
  {{- end }}
  {{- if .Values.monitoring.enableJMX }}
  jmx:
    enabled: true
  {{- end }}
  container:
  {{- with .Values.resources }}
    memory: {{ .limits.memory }}:{{ .requests.memory }}
    cpu: {{ .limits.cpu }}:{{ .requests.cpu }}
  {{- end }}
  {{- with .Values.storage }}
    storage: {{ .size }}
    {{- if .ephemeral }}
    ephemeralStorage: true
    {{- else if and .storageClassName (not .ephemeral)  }}
    storageClassName: {{ .storageClassName }}
    {{- end }}
  {{- end }}
  service:
    container:
  {{- with .Values.probes.readinessProbe }}
      readinessProbe:
        failureThreshold: {{ .failureThreshold }}
    {{- if .initialDelaySeconds }}
        initialDelaySeconds: {{ .initialDelaySeconds }}
    {{- end }}
        periodSeconds: {{ .periodSeconds }}
        successThreshold: {{ .successThreshold }}
        timeoutSeconds: {{ .timeoutSeconds }}
  {{- end }}
  {{- with .Values.probes.livenessProbe }}
      livenessProbe:
        failureThreshold: {{ .failureThreshold }}
    {{- if .initialDelaySeconds }}
        initialDelaySeconds: {{ .initialDelaySeconds }}
    {{- end }}
        periodSeconds: {{ .periodSeconds }}
        successThreshold: {{ .successThreshold }}
        timeoutSeconds: {{ .timeoutSeconds }}
  {{- end }}
  {{- with .Values.probes.startupProbe }}
      startupProbe:
        failureThreshold: {{ .failureThreshold }}
        initialDelaySeconds: {{ .initialDelaySeconds }}
        periodSeconds: {{ .periodSeconds }}
        successThreshold: {{ .successThreshold }}
        timeoutSeconds: {{ .timeoutSeconds }}
  {{- end }}
  security:
    endpointAuthentication: {{ not .Values.authentication.disable }}
  {{- if and .Values.authentication.credentialsSecretName
  (not .Values.authentication.disable) }}
    endpointSecretName: {{ .Values.authentication.credentialsSecretName }}
  {{- end }}
  {{- if .Values.encryption.disable }}
    endpointEncryption:
      type: None
  {{- end }}
  {{- if and .Values.credentialsStore.enabled .Values.credentialsStore.secretName }}
    credentialStoreSecretName: {{ .Values.credentialsStore.secretName }}
  {{- end }}
  {{- if .Values.logging }}
  logging:
    categories:
    {{- range $category, $level := .Values.logging }}
      {{ $category }}: {{ $level }}
    {{- end }}
  {{- end }}
{{- end -}}